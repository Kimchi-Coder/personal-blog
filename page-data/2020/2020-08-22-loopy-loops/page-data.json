{"componentChunkName":"component---src-templates-blog-post-template-js","path":"/2020/2020-08-22-loopy-loops/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Loopy Looping - Arrays vs Objects\",\n  \"date\": \"2020-08-22T00:00:00.000Z\",\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"It's About Iterables\"), mdx(\"p\", null, \"An important concept in programming is that of \\\"iterables\\\". These are objects that are capable of returning each of its items one at a time. This is important since, without this ability, we would be unable to loop or iterate using for-loops, while-loops, .map(), .forEach(), etc. In JavaScript, strings, arrays, and maps are iterables, however, objects are not!  Take, for example, the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let myStr = 'Loopy looping';\\nlet myArr = ['cat', 'dog', 'tiger', 'parrot'];\\nlet myObj = { me: 'Jeremy', you: '*insert name*' };\\n\\nfor (let i = 0; i < myStr.length; i++) {\\n  console.log(myStr[i]); // L, o, o, p, y, , l, o, o, p, i, n, g\\n}\\n\\nfor (let i = 0; i < myArr.length; i++) {\\n  console.log(myArr[i]); // cat, dog, tiger, parrot\\n}\\n\\nfor (let i = 0; i < myObj.length; i++) {\\n  // myObj.length is undefined\\n  console.log(myObj[i]); // no output\\n}\\n\")), mdx(\"p\", null, \"The for-loops for myStr and myArr work just as we'd expect, however, the for-loop for myObj does nothing. Let's try another way to iterate: for...of.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"for (let char of myStr) {\\n  console.log(char); // L, o, o, p, y, , l, o, o, p, i, n, g\\n}\\n\\nfor (let animal of myArr) {\\n  console.log(animal); // cat, dog, tiger, parrot\\n}\\n\\nfor (let key of myObj) {\\n  myObj[key]; // myObj is not iterable!\\n}\\n\")), mdx(\"p\", null, \"Once again, myStr and myArr work just fine, but myObj cannot be iterated over!  So, what can we do? This is where the for...in iterator comes in!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"for (let key in myObj) {\\n  console.log(myObj[key]); // Jeremy, *insert name*\\n}\\n\")), mdx(\"p\", null, \"Here, we can take the key for each key-value pair in the object and use it directly back on the object itself to get the value. However, there are a couple alternatives that might be more enticing:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"for (let [key, value] of Object.entries(myObj)) {\\n  console.log(key + ': ' + value); // me: Jeremy, you: *insert name*\\n}\\n\")), mdx(\"p\", null, \"Awesome, we can now use for...of on our obj and even have full control over both keys and values! But, how does this work?  By calling Object.entries()on myObj, we actually create a new array that contains an array for each property of the myObj object that has the form of \", \"[key, value]\", \". In this case, the array that is created is [\", \"['me', 'Jeremy]\", \", \", \"['you', '\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"insert name\"), \"']\", \"].\\nNow, I mentioned that were multiple other ways to iterate over the object --albeit not DIRECTLY iterating over the object-- so what is that other way?\\nUsing maps! Maps are a newer data structure added to JS with ES6. Whereas objects do not maintain the order in which its properties are added, maps do!\\nAnother interesting feature of maps is that its keys may may use not only primitives but also objects, however, that is a topic for another day.\\nSo, let's see that map example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let myMap = new Map(Object.entries(myObj));\\n\")), mdx(\"p\", null, \"But what does myMap even look like?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"console.log(myMap); // Map { 'me' => 'Jeremy', 'you' => '*insert name*' }\\n\")), mdx(\"p\", null, \"So, console logging a map with show that it is a Map object and show each of its keys 'mapping' to their values. So, when we iterate over the map...\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"for (let property of myMap) {\\n  console.log(property); // ['me', 'Jeremy], ['you', '*insert name*']\\n}\\n\")), mdx(\"p\", null, \"We actually get that map's properties in the form or \", \"[key, value]\", \". That's really cool and opens up some different possibilities to basically iterate over a map. However, which way is 'best' is subjective and up to your use-case. There are performance AND memory implications to each, so you should consider this before deciding on one. However, on a small project, this will mostly but up to personal taste.\"), mdx(\"p\", null, \"In summary, strings, arrays, and maps are all iterables in JS while objects are not. However, there are multiple ways to essentially iterate over an object in the form of for...in, for...of in combination with Object.entries(), and even converting the obj to a map.\"), mdx(\"p\", null, \"It is important to note that, while using the for...of syntax is more readable and great syntactic sugar, it actually is much slower than a traditional for-loop. However, if iterating over just a few thousand values, then the performance hit shouldn't be too great. More to the point, if performance is vital, perhaps using a different coding language to iterate over your data would be a better choice than JS!\"), mdx(\"h3\", null, \"EXTRA: using forEach and map on arrays and maps:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"myMap.forEach((value, key) => console.log(value + ': ' + key)); // Jeremy: me \\\\n *insert name*: you\\n\\nmyArr.forEach((val, index) => console.log(val + ' at index: ' + index)); // cat at index: 0 \\\\n dog at index: 1 ...\\n\\nmyArr.map((val, index) => console.log(val + ' ' + index)); // cat 0 \\\\n dog 1 \\\\n tiger 3\\n\\nmyMap.map((value, key) => console.log(prop)); // myMap has no 'map()' function!\\n\")), mdx(\"p\", null, \"Just like an array, a map can use the forEach method and accepts the optional arguments of value and key IN THE ORDER. However, unlike arrays, maps, ironically, cannot use the map() method. Why? Well, simply because it is not in their prototype. \"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Loopy Looping - Arrays vs Objects","date":"August 22nd, 2020"}}},"pageContext":{"slug":"/2020/2020-08-22-loopy-loops/","previous":{"fields":{"slug":"/2020/2020-08-21-second-post/"},"frontmatter":{"title":"A Test Post"}},"next":null}},"staticQueryHashes":["4080856488"]}